apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-pgs-config
data:
  input.json: {{ required ".Values.calcWorkflowInput is required" .Values.calcWorkflowInput | toJson | quote }}
  params.yml: |
{{- range $key, $value := .Values.calcJobParams }}
    {{ $key }}: {{ $value }}
{{- end }}
  nxf.config: |
    workDir = {{ required ".Values.nxfParams.workBucketPath is required" .Values.nxfParams.workBucketPath | quote }}

    process {
      executor = "google-batch"
      errorStrategy = "retry"
      maxRetries = 3

      withName: 'DOWNLOAD_SCOREFILES' {
        cpus = 1
        memory = { check_max( 1.GB * task.attempt, 'memory') }
        time = { check_max( 1.hour * task.attempt, 'time') }
      }

      withName: 'COMBINE_SCOREFILES' {
        cpus = 1
        memory = { check_max( 8.GB * task.attempt, 'memory') }
        time = { check_max( 12.hour * task.attempt, 'time') }
      }

      withName: 'DUMPSOFTWAREVERSIONS' {
        cpus = 1
        memory = { check_max( 1.GB * task.attempt, 'memory') }
        time = { check_max( 1.hour * task.attempt, 'time') }
      }

      withName: 'SCORE_REPORT' {
        cpus = 2
        memory = { check_max( 8.GB * task.attempt, 'memory') }
        time = { check_max( 1.hour * task.attempt, 'time' }
      }

      withName: 'PLINK2_RELABELPVAR' {
        cpus = 2
        memory = { check_max( 16.GB * task.attempt, 'memory') }
        time = { check_max( 2.hour * task.attempt, 'time') }
      }

      withName: 'MATCH_VARIANTS' {
        cpus = 2
        memory = { check_max( 32.GB * task.attempt, 'memory') }
        time = { check_max( 6.hour * task.attempt, 'time') }
      }

      withName: 'MATCH_COMBINE' {
        cpus = 2
        memory = { check_max( 32.GB * task.attempt, 'memory') }
        time = { check_max( 6.hour * task.attempt, 'time') }
      }

      withName: 'PLINK2_SCORE' {
        cpus = 1
        memory = { check_max( 8.GB * task.attempt, 'memory') }
        time = { check_max( 12.hour * task.attempt, 'time') }
      }

      withName: 'SCORE_AGGREGATE' {
        cpus = 1
        memory = { check_max( 8.GB * task.attempt, 'memory') }
        time = { check_max( 4.hour * task.attempt, 'time') }
      }
    }

    google {
      project = {{ required ".Values.nxfParams.gcpProject is required" .Values.nxfParams.gcpProject | quote }}
      location = {{ required ".Values.nxfParams.location is required" .Values.nxfParams.location | quote }}
      batch {
        spot = {{ .Values.nxfParams.spot | default true | quote }}
      }
    }

    wave {
      enabled = {{ .Values.nxfParams.wave | default true | quote }}
    }

    fusion {
      enabled =  {{ .Values.nxfParams.fusion | default true | quote }}
    }

    tower {
      accessToken = {{ required ".Values.secrets.towerToken is required" .Values.secrets.towerToken | quote }}
      workspaceId = {{ required ".Values.secrets.towerId is required" .Values.secrets.towerId | quote }}
      enabled = {{ .Values.nxfParams.tower | default true | quote }}
    }
  scm: |
    providers {
      ebi {
        server = 'https://gitlab.ebi.ac.uk'
        platform = 'gitlab'
      }
    }
